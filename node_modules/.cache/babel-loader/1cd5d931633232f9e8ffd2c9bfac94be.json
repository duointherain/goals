{"ast":null,"code":"var _jsxFileName = \"/Users/duointherain/Documents/lambda/jmax-maxwell40/React-Todo/src/App.js\";\nimport React from 'react';\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nconst tasks = [{\n  task: \"Write Chapter Three\",\n  id: 1528817077286,\n  completed: false\n}, {\n  task: \"go for a run\",\n  id: 1528817084358,\n  completed: false\n}];\n\nclass App extends React.Component {\n  // you will need a place to store your state in this component.\n  // design `App` to be the parent component of your application.\n  // this component is going to take care of state, and any change handlers you need to work with your state\n  constructor() {\n    super();\n\n    this.handleToggleItem = taskId => {\n      this.setState({\n        tasks: this.state.tasks.map(task => {\n          if (task.id === taskId) {\n            return { ...task,\n              completed: !task.completed\n            };\n          } else {\n            return task;\n          }\n        })\n      });\n    };\n\n    this.handleAddItem = task => {\n      this.setState({\n        tasks: [...this.state.tasks, {\n          task: task,\n          id: new Date(),\n          completed: false\n        }]\n      });\n    };\n\n    this.clearTasks = () => {\n      this.setState({\n        tasks: this.state.tasks.filter(task => !task.completed)\n      });\n      console.log('sup');\n    };\n\n    this.state = {\n      tasks: tasks\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Max' Win the Day\")), React.createElement(TodoForm, {\n      handleAddItem: this.handleAddItem,\n      handleClearTasks: this.clearTasks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(TodoList, {\n      tasks: this.state.tasks,\n      handleToggleItem: this.handleToggleItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/duointherain/Documents/lambda/jmax-maxwell40/React-Todo/src/App.js"],"names":["React","TodoForm","TodoList","tasks","task","id","completed","App","Component","constructor","handleToggleItem","taskId","setState","state","map","handleAddItem","Date","clearTasks","filter","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,MAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,IAAI,EAAE,qBADR;AAEEC,EAAAA,EAAE,EAAE,aAFN;AAGEC,EAAAA,SAAS,EAAE;AAHb,CADY,EAMZ;AACEF,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,EAAE,EAAE,aAFN;AAGEC,EAAAA,SAAS,EAAE;AAHb,CANY,CAAd;;AAaA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAChC;AACA;AACA;AACAC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAOdC,gBAPc,GAOMC,MAAD,IAAY;AAE7B,WAAKC,QAAL,CAAc;AACZT,QAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KAAX,CAAiBW,GAAjB,CAAsBV,IAAD,IAAU;AACpC,cAAIA,IAAI,CAACC,EAAL,KAAYM,MAAhB,EAAwB;AACtB,mBAAO,EAAE,GAAGP,IAAL;AAAWE,cAAAA,SAAS,EAAE,CAACF,IAAI,CAACE;AAA5B,aAAP;AACD,WAFD,MAEO;AACL,mBAAOF,IAAP;AACD;AACF,SANM;AADK,OAAd;AASD,KAlBa;;AAAA,SAoBdW,aApBc,GAoBGX,IAAD,IAAU;AACxB,WAAKQ,QAAL,CAAc;AACZT,QAAAA,KAAK,EAAE,CACL,GAAG,KAAKU,KAAL,CAAWV,KADT,EAEL;AACEC,UAAAA,IAAI,EAAEA,IADR;AAEEC,UAAAA,EAAE,EAAE,IAAIW,IAAJ,EAFN;AAGEV,UAAAA,SAAS,EAAE;AAHb,SAFK;AADK,OAAd;AAUD,KA/Ba;;AAAA,SAiCdW,UAjCc,GAiCD,MAAM;AACjB,WAAKL,QAAL,CAAc;AAACT,QAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KAAX,CAAiBe,MAAjB,CAAwBd,IAAI,IAAI,CAACA,IAAI,CAACE,SAAtC;AAAR,OAAd;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,KApCa;;AAEZ,SAAKP,KAAL,GAAa;AACXV,MAAAA,KAAK,EAAEA;AADI,KAAb;AAGD;;AAiCDkB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CADF,EAIE,oBAAC,QAAD;AAAU,MAAA,aAAa,EAAE,KAAKN,aAA9B;AAA6C,MAAA,gBAAgB,EAAE,KAAKE,UAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWV,KAA5B;AAAmC,MAAA,gBAAgB,EAAE,KAAKO,gBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AASD;;AApD+B;;AAuDlC,eAAeH,GAAf","sourcesContent":["import React from 'react';\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\n\nconst tasks = [\n  {\n    task: \"Write Chapter Three\",\n    id: 1528817077286,\n    completed: false,\n  },\n  {\n    task: \"go for a run\",\n    id: 1528817084358,\n    completed: false,\n  },\n];\n\nclass App extends React.Component {\n  // you will need a place to store your state in this component.\n  // design `App` to be the parent component of your application.\n  // this component is going to take care of state, and any change handlers you need to work with your state\n  constructor() {\n    super();\n    this.state = {\n      tasks: tasks,\n    };\n  }\n\n  handleToggleItem = (taskId) => {\n   \n    this.setState({\n      tasks: this.state.tasks.map((task) => {\n        if (task.id === taskId) {\n          return { ...task, completed: !task.completed };\n        } else {\n          return task;\n        }\n      }),\n    });\n  };\n\n  handleAddItem = (task) => {\n    this.setState({\n      tasks: [\n        ...this.state.tasks,\n        {\n          task: task,\n          id: new Date(),\n          completed: false,\n        },\n      ],\n    });\n  };\n\n  clearTasks = () => {\n    this.setState({tasks: this.state.tasks.filter(task =>(!task.completed))});\n    console.log('sup');\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='main'>\n          <h2>Max' Win the Day</h2>\n        </div>\n        <TodoForm handleAddItem={this.handleAddItem} handleClearTasks={this.clearTasks}/>\n        <TodoList tasks={this.state.tasks} handleToggleItem={this.handleToggleItem}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}